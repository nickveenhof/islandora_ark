<?php

/**
 * @file
 * EZID Archival Resource Key (ARK) management module.
 */

// Pulls in the EZID class which handles our connection to EZID.
module_load_include('inc', 'islandora_ezid', 'includes/islandora_ezid.ezid');

// Pulls in some basic utility functions.
module_load_include('inc', 'islandora_ezid', 'includes/islandora_ezid.utils');

/**
 * Implements hook_menu().
 *
 * Drupal menus allow urls to be used as function calls, giving Drupal gets
 * much of its power and flexibillty.
 *
 * See Drupal API for more details: http://goo.gl/kyZnl
 */
function islandora_ezid_menu() {
  // If Islandora is installed, we'll use its default path; otherwise, no.
  $islandora = module_exists('islandora') ? 'islandora/' : '';

  $items['admin/' . $islandora . 'ezid'] = array(
    'title' => 'EZID ARKs',
    'description' => 'Configures the management of ARKs through EZID.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_ezid_admin'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/islandora_ezid.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/' . $islandora . 'ezid/settings'] = array(
    'title' => 'EZID Settings',
    'description' => 'Allows batch operations against EZID',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_ezid_admin'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/islandora_ezid.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/' . $islandora . 'ezid/batch'] = array(
    'title' => 'Run Batch',
    'description' => 'Runs EZID batch operations',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_ezid_batch'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/islandora_ezid.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/' . $islandora . 'ezid/manage'] = array(
    'title' => 'Manage',
    'description' => 'Manages ARKs created with EZID',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_ezid_manage'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/islandora_ezid.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/' . $islandora . 'ezid/upload'] = array(
    'title' => 'Upload Batch',
    'description' => 'Uploads ARKs which have been updated since assignment',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_ezid_upload'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/islandora_ezid.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['ezid/tags/autocomplete'] = array(
    'title' => '',
    'description' => '',
    'page callback' => 'islandora_ezid_autocomplete',
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Autocomplete function for EZID ARK tag field.
 */
function islandora_ezid_autocomplete() {
  $vocabulary = taxonomy_get_tree(get_ezid_tag_vid());
  $list = array();

  // Add all the terms to the autocomplete list.
  foreach ($vocabulary as $term) {
    $term_name = check_plain($term->name);
    $list[$term_name] = $term_name;
  }

  // Remove the dups; alternatively, we could use: $term->name [$term->tid].
  $list = array_unique($list);

  // Sort these terms to make them easier to find in a list of lots-o-terms.
  ksort($list);

  // The out-of-the-box Drupal autocomplete user interface expects json, so...
  return drupal_json_output($list);
}

/**
 * Implements hook_theme().
 *
 * We supply a pattern so we can overide templates at the theme level if needed.
 *
 * We can append a pid to a template and the new template file will be called
 * (the pids colon should be replaced with a dash)
 */
function islandora_ezid_theme($existing, $type, $theme, $path) {
  return array(
    'islandora_ezid' => array(
      // Theme details for islandora_ezid go here.
    ),
  );
}

/**
 * Implements hook_preprocess_theme().
 *
 * This is a Drupal hook, not supplied by islandora.
 *
 * Variables required for display are assembled here and passed to the template
 * file defined in the theme function.  The function defines islandora-ezid,
 * which expands to islandora-ezid.tpl.php.
 *
 * The islandora object has been added to the $variables array by
 * hook_CMODEL_PID_islandora_view_object(), which in this case is
 * islandora_ezid_islandora_ezidCModel_islandora_view_object
 */
function islandora_ezid_preprocess_islandora_ezid(array &$variables) {
  // Do something.
}

/**
 * Implements hook_CMODEL_PID_islandora_object_ingested().
 *
 * This hook tells Islandora what to do with the object once it has been
 * ingested.
 */
function islandora_ezid_islandora_ezidCModel_islandora_object_ingested($object) {
  // Do something.
}

/**
 * Gets EZID settings.
 *
 * The default NAAN (99999) and 'shoulder' (fk4) are for testing purposes only
 * and should be reconfigured in the admin UI.  Anything minted with the test
 * NAAN and shoulder disappears in two weeks.
 *
 * @return array
 *   Configuration options for EZID.
 */
function islandora_ezid_get_settings() {
  return variable_get('islandora_ezid_settings', array()) +
  array(
    'debugMode' => FALSE, /* controls the level of log messages */
    'ezidService' => 'https://n2t.net/ezid/', /* Expose, but change doubtful */
    'ezidNAAN' => '99999', /* 99999 is used for testing */
    'ezidUsername' => 'YOUR_USERNAME', /* For display purposes */
    'ezidShoulder' => 'fk4', /* fk4 is used for testing */
    'cachedARKCount' => '200', /* In case EZID is ever down */
  );
}

/**
 * Gets EZID settings for running batch jobs.
 *
 * @return array
 *   Configuration options for EZID batch.
 */
function islandora_ezid_batch_get_settings() {
  return variable_get('islandora_ezid_batch_settings', array()) +
  array(
    'debugMode' => FALSE, /* controls the level of log messages */
    'arkExportFileName' => 'arks-', /* the name of the file we download */
    'numberOfARKs' => '100', /* default value for how many we want */
    'arkCollectionOrTag' => 'COLLECTION_NAME', /* gives us way to retrieve */
  );
}

/**
 * Implements hook_cron().
 *
 * Adds an ARK caching and minting service to Drupal's cron jobs.
 */
function islandora_ezid_cron() {
  $settings = islandora_ezid_get_settings();
  $username = $settings['ezidUsername'];
  $password = $settings['ezidPassword'];
  $shoulder = $settings['ezidShoulder'];
  $total = $settings['cachedARKCount'];
  $url = $settings['ezidService'];
  $debug = $settings['debugMode'];
  $naan = $settings['ezidNAAN'];

  $count = count_reserved_arks(); /* How many ARKs do we have cached? */
  $count = $total - $count; /* How many more reserveds do we need to add? */

  if ($count == 0) {
    watchdog('ezid_cron', "Cron checked but we don't need any more ARKs");
    return;
  }
  elseif ($debug) {
    $message = 'We need to reserve ' . $count . ' new ARKs';
    watchdog('ezid_cron', $message, NULL, WATCHDOG_DEBUG);
  }

  try {
    $ezid = new EZID($url, $naan, $shoulder, $username, $password, $debug);

    for ($index = 1; $index <= $count; $index++) {
      save_ark_record($ezid->reserveARK());
    }

    if ($debug) {
      $message = 'Successfully reserved ' . $count . ' new ARKs';
      watchdog('ezid_cron', $message, NULL, WATCHDOG_DEBUG);
    }
  }
  catch (Exception $details) {
    watchdog('ezid_cron', $details->getMessage(), NULL, WATCHDOG_ERROR);
  }
}
