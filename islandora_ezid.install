<?php

/**
 * @file
 * Installs the required Islandora EZID module.
 */

// Pulls in utility functions for the module.
module_load_include('inc', 'islandora_ezid', 'includes/islandora_ezid.utils');

/**
 * Implements hook_install().
 *
 * @see islandora_islandora_required_objects()
*/
function islandora_ezid_install() {
  // We shouldn't have this table around, but let's remove it if we do.
  if (db_table_exists('islandora_ezid_arks')) {
    $message = 'Removing pre-existing islandora_ezid_arks table';
    watchdog('ezid_install', $message, NULL, WATCHDOG_WARNING);

    // Let's be cautious and export our ARKs before uninstalling.
    export_arks();

    // Then, we can drop the database table.
    drupal_uninstall_schema('islandora_ezid');
  }

  // Create the EZID ARK database table.
  drupal_install_schema('islandora_ezid');

  // Tests whether an old copy of our vocabulary exists before trying to add.
  $vid = get_ezid_tag_vid();

  if (isset($vid)) {
    watchdog('ezid_install', 'Removing existing EZID tag vocabulary table');
    remove_ezid_vocabulary();
  }

  // Create a taxonomy we can use for informal collection names and other tags.
  taxonomy_vocabulary_save((object) array(
  'name' => 'EZID ARK Tags',
  'machine_name' => 'ezid_ark_tags',
  'description' => 'Tags used to label individual ARK records',
  'hierarchy' => 0,
  ));

  // Remember the VID of our vocabulary so we can have easy access to it later.
  variable_set('EZID_VOCAB_VID', get_ezid_tag_vid());
}

/**
 * Implements hook_uninstall().
 */
function islandora_ezid_uninstall() {
  // Remove our various variable settings...
  variable_del('islandora_ezid_settings');
  variable_del('islandora_ezid_batch_settings');

  // Let's be cautious and export our ARKs before uninstalling.
  export_arks();

  // Remove the tag vocabulary we created on install.
  remove_ezid_vocabulary();

  /* drupal_uninstall_schema() is called automagically in D7 */
}

/**
 * Implements hook_schema().
 *
 * Describes the local EZID table structure.
 */
function islandora_ezid_schema() {
  $schema['islandora_ezid_arks'] = array(
    'description' => 'Stores reserved and minted ARKs',
    'fields' => array(
      'id' => array(
        'description' => 'Primary key for use in use in islandora_ezid_tags',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'ark' => array(
        'description' => 'The Archival Resources Key.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'syspath' => array(
        'description' => 'The system-based path for the object.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'title' => array(
        'description' => 'The title for the object represented by the ARK.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      /* More textual than authoritative; keeping structure simple to start. */
      'creator' => array(
        'description' => 'The creator for the object represented by the ARK.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      /* More textual than authoritative; keeping structure simple to start. */
      'publisher' => array(
        'description' => 'The publisher for the object represented by the ARK.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      /* More textual than authoritative; keeping structure simple to start. */
      'type' => array(
        'description' => 'The publisher for the object represented by the ARK.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      /* More textual than authoritative; keeping structure simple to start. */
      'date' => array(
        'description' => 'The publisher for the object represented by the ARK.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'date_reserved' => array(
        'description' => 'The date this ARK was reserved for use.',
        'type' => 'datetime',
        'mysql_type' => 'datetime',
        'not null' => TRUE,
      ),
      'date_assigned' => array(
        'description' => 'The date this ARK was assigned to an object.',
        'type' => 'datetime',
        'mysql_type' => 'datetime',
        'not null' => FALSE,
      ),
      'date_lastupdate' => array(
        'description' => 'The date this ARK was assigned to an object.',
        'type' => 'datetime',
        'mysql_type' => 'datetime',
        'not null' => TRUE,
      ),
      /* TODO: Are there more states we need to include? */
      'state' => array(
        'description' => 'The state of the ARK: 0-reserved and 1-assigned',
        'type' => 'int',
        'unsigned' => TRUE,
        'default' => 0,
        'length' => 1,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('id'),
  );

  // Huh, okay, so... no foreign key support in D7; we'll brute force it.
  $schema['islandora_ezid_tags'] = array(
    'description' => 'Stores tags for ARK records',
    'fields' => array(
      'id' => array(
        'description' => 'Primary key for some future use',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'ark_record' => array(
        'description' => 'The primary key of the ARK record.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'tag' => array(
        'description' => 'An EZID ARK tag.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      )
    ),
    'primary key' => array('id'),
  );

  return $schema;
}
